// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.circuskitchens.flutter_datawedge.pigeon

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Mode for profile creations */
enum class ConfigMode(val raw: Int) {
  CREATE_IF_NOT_EXISTS(0),
  OVERWRITE(1),
  UPDATE(2);

  companion object {
    fun ofRaw(raw: Int): ConfigMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Plugin to be configured */
enum class PluginName(val raw: Int) {
  BARCODE(0),
  MSR(1),
  RFID(2),
  SERIAL(3),
  VOICE(4),
  WORKFLOW(5),
  BDF(6),
  ADF(7),
  TOKENS(8),
  INTENT(9),
  KEYSTROKE(10),
  IP(11),
  DCP(12),
  EKB(13);

  companion object {
    fun ofRaw(raw: Int): PluginName? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScannerIdentifer(val raw: Int) {
  AUTO(0),
  INTERNAL_IMAGER(1),
  INTERNAL_LASER(2),
  INTERNAL_CAMERA(3),
  SERIAL_SSI(4),
  BLUETOOTH_SSI(5),
  BLUETOOTH_RS6000(6),
  BLUETOOTH_DS2278(7),
  BLUETOOTH_DS3678(8),
  PLUGABLE_SSI(9),
  PLUGABLE_SSI_RS5000(10),
  USB_SSI_DS3608(11),
  BLUETOOTH_ZEBRA(12),
  USB_ZEBRA(13);

  companion object {
    fun ofRaw(raw: Int): ScannerIdentifer? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UpcSupplementalMode(val raw: Int) {
  NONE(0),
  ALWAYS(1),
  AUTO(2),
  SMART(3),
  SUPPLEMENTAL378TO379(4),
  SUPPLEMENTAL978TO979(5),
  SUPPLEMENTAL414TO419AND434TO439(6),
  SUPPLEMENTAL977(7);

  companion object {
    fun ofRaw(raw: Int): UpcSupplementalMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UpcEanCouponReport(val raw: Int) {
  OLD_MODE(0),
  NEW_MODE(1),
  BOTH(2);

  companion object {
    fun ofRaw(raw: Int): UpcEanCouponReport? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class UpcEanBooklandFormat(val raw: Int) {
  ISBN10(0),
  ISBN13(1);

  companion object {
    fun ofRaw(raw: Int): UpcEanBooklandFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScanningMode(val raw: Int) {
  SINGLE(0),
  UDI(1),
  MULTI_BARCODE(2),
  DOCUMENT_CAPTURE(3);

  companion object {
    fun ofRaw(raw: Int): ScanningMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class InverseOcr(val raw: Int) {
  REGULAR(0),
  INVERSE(1),
  AUTO(2);

  companion object {
    fun ofRaw(raw: Int): InverseOcr? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class OcrOrientation(val raw: Int) {
  DEGREE_0(0),
  DEGREE_90(1),
  DEGREE_180(2),
  DEGREE_270(3),
  OMNIDIRECTIONAL(4);

  companion object {
    fun ofRaw(raw: Int): OcrOrientation? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class IntentDelivery(val raw: Int) {
  START_ACTIVITY(0),
  START_SERVICE(1),
  BROADCAST(2);

  companion object {
    fun ofRaw(raw: Int): IntentDelivery? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DpmMode(val raw: Int) {
  DISABLED(0),
  MODE1(1),
  MODE2(2);

  companion object {
    fun ofRaw(raw: Int): DpmMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BeamWidth(val raw: Int) {
  NARROW(0),
  NORMAL(1),
  WIDE(2);

  companion object {
    fun ofRaw(raw: Int): BeamWidth? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PowerMode(val raw: Int) {
  LOW(0),
  HIGH(1),
  ALWAYS_ON(2),
  OPTIMIZED(3);

  companion object {
    fun ofRaw(raw: Int): PowerMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MpdMode(val raw: Int) {
  DISPLAY_OFF(0),
  DISPLAY_ON(1);

  companion object {
    fun ofRaw(raw: Int): MpdMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PicklistMode(val raw: Int) {
  DISABLED(0),
  HARDWARE(1),
  SOFTWARE(2);

  companion object {
    fun ofRaw(raw: Int): PicklistMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ReaderMode(val raw: Int) {
  TRIGGERED(0),
  PRESENTATION(1);

  companion object {
    fun ofRaw(raw: Int): ReaderMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TriggerSource(val raw: Int) {
  LEFT(0),
  RIGHT(1),
  CENTER(2),
  GUN(3),
  PROXIMITY(4),
  KEY_MAPPER_SCAN(5),
  KEY_MAPPER_L1(6),
  KEY_MAPPER_R1(7),
  WIRED_LEFT(8),
  WIRED_RIGHT(9);

  companion object {
    fun ofRaw(raw: Int): TriggerSource? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DpmIlluminationControl(val raw: Int) {
  DIRECT(0),
  INDIRECT(1),
  CYCLE(2);

  companion object {
    fun ofRaw(raw: Int): DpmIlluminationControl? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class VolumeSliderType(val raw: Int) {
  RINGER(0),
  MUSIC_MEDIA(1),
  ALARMS(2),
  NOTIFICATION(3);

  companion object {
    fun ofRaw(raw: Int): VolumeSliderType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CodeIdType(val raw: Int) {
  NONE(0),
  AIM(1),
  SYMBOL(2);

  companion object {
    fun ofRaw(raw: Int): CodeIdType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ViewFinderMode(val raw: Int) {
  ENABLED(0),
  STATIC_RETICLE(1);

  companion object {
    fun ofRaw(raw: Int): ViewFinderMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Charset(val raw: Int) {
  AUTO(0),
  UTF8(1),
  ISO88591(2),
  SHIFT_JIS(3),
  GB18030(4),
  NONE(5);

  companion object {
    fun ofRaw(raw: Int): Charset? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class EffortLevel(val raw: Int) {
  LEVEL_0(0),
  LEVEL_1(1),
  LEVEL_2(2),
  LEVEL_3(3);

  companion object {
    fun ofRaw(raw: Int): EffortLevel? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Inverse1dMode(val raw: Int) {
  DISABLE(0),
  ENABLE(1),
  AUTO(2);

  companion object {
    fun ofRaw(raw: Int): Inverse1dMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DelayToLowPowerMode(val raw: Int) {
  SECONDS_1(0),
  SECONDS_30(1),
  MINUTES_1(2),
  MINUTES_5(3);

  companion object {
    fun ofRaw(raw: Int): DelayToLowPowerMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class LcdMode(val raw: Int) {
  DISABLED(0),
  ENABLED(1);

  companion object {
    fun ofRaw(raw: Int): LcdMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class IlluminationMode(val raw: Int) {
  OFF(0),
  TORCH(1);

  companion object {
    fun ofRaw(raw: Int): IlluminationMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class SceneDetectQualifier(val raw: Int) {
  NONE(0),
  PROXIMITY_SENSOR(1);

  companion object {
    fun ofRaw(raw: Int): SceneDetectQualifier? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AimType(val raw: Int) {
  TRIGGER(0),
  TIMED_HOLD(1),
  TIMED_RELEASE(2),
  PRESS_AND_RELEASE(3),
  PRESENTATION(4),
  CONTINOUS_READ(5),
  PRESS_AND_SUSTAIN(6),
  PRESS_AND_CONTINUE(7),
  TIMED_CONTINOUS(8);

  companion object {
    fun ofRaw(raw: Int): AimType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class SwitchOnEvent(val raw: Int) {
  DISABLED(0),
  ON_CONNECT(1),
  ON_DISCONNECT(2),
  CONNECT_OR_DISCONNECT(3);

  companion object {
    fun ofRaw(raw: Int): SwitchOnEvent? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PresentationModeSensitivity(val raw: Int) {
  HIGH(0),
  MEDIUM(1),
  LOW(2);

  companion object {
    fun ofRaw(raw: Int): PresentationModeSensitivity? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DatawedgeApiTargets(val raw: Int) {
  SOFT_SCAN_TRIGGER(0),
  SCANNER_PLUGIN(1),
  GET_PROFILES(2),
  GET_ACTIVE_PROFILE(3);

  companion object {
    fun ofRaw(raw: Int): DatawedgeApiTargets? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class LabelType(val raw: Int) {
  CODE39(0),
  CODABAR(1),
  CODE128(2),
  D2OF5(3),
  IATA2OF5(4),
  I2OF5(5),
  CODE93(6),
  UPCA(7),
  UPCE0(8),
  UPCE1(9),
  EAN8(10),
  EAN13(11),
  MSI(12),
  EAN128(13),
  TRIOPTIC39(14),
  BOOKLAND(15),
  COUPON(16),
  DATABAR_COUPON(17),
  ISBT128(18),
  CODE32(19),
  PDF417(20),
  MICROPDF(21),
  TLC39(22),
  CODE11(23),
  MAXICODE(24),
  DATAMATRIX(25),
  QRCODE(26),
  GS1DATABAR(27),
  GS1DATABAR_LIM(28),
  GS1DATABAR_EXP(29),
  USPOSTNET(30),
  USPLANET(31),
  UKPOSTAL(32),
  JAPPOSTAL(33),
  AUSPOSTAL(34),
  DUTCHPOSTAL(35),
  FINNISHPOSTAL4S(36),
  CANPOSTAL(37),
  CHINESE2OF5(38),
  AZTEC(39),
  MICROQR(40),
  US4STATE(41),
  US4STATE_FICS(42),
  COMPOSITE_AB(43),
  COMPOSITE_C(44),
  WEBCODE(45),
  SIGNATURE(46),
  KOREAN3OF5(47),
  MATRIX2OF5(48),
  OCR(49),
  HANXIN(50),
  MAILMARK(51),
  FORMAT(52),
  GS1DATAMATRIX(53),
  GS1QRCODE(54),
  DOTCODE(55),
  GRIDMATRIX(56),
  UNDEFINED(57);

  companion object {
    fun ofRaw(raw: Int): LabelType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScanSource(val raw: Int) {
  MSR(0),
  SCANNER(1),
  SIMULSCAN(2),
  SERIAL(3),
  VOICE(4),
  RFID(5);

  companion object {
    fun ofRaw(raw: Int): ScanSource? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DecodeMode(val raw: Int) {
  MULTIPLE(0),
  SINGLE(1);

  companion object {
    fun ofRaw(raw: Int): DecodeMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScannerState(val raw: Int) {
  WAITING(0),
  SCANNING(1),
  IDLE(2),
  CONNECTED(3),
  DISCONNECTED(4),
  DISABLED(5);

  companion object {
    fun ofRaw(raw: Int): ScannerState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Decoder(val raw: Int) {
  AUSTRALIAN_POSTAL(0),
  AZTEC(1),
  CANADIAN_POSTAL(2),
  CHINESE2OF5(3),
  CODABAR(4),
  CODE11(5),
  CODE32(6),
  CODE39(7),
  CODE93(8),
  CODE128(9),
  COMPOSITE_AB(10),
  COMPOSITE_C(11),
  DATAMATRIX(12),
  SIGNATURE(13),
  D2OF5(14),
  DOTCODE(15),
  DUTCH_POSTAL(16),
  EAN8(17),
  EAN13(18),
  FINNISH_POSTAL4S(19),
  GRID_MATRIX(20),
  GS1DATABAR(21),
  GS1DATABAR_LIM(22),
  GS1DATABAR_EXP(23),
  GS1DATAMATRIX(24),
  GS1QRCODE(25),
  HANXIN(26),
  I2OF5(27),
  JAPANESE_POSTAL(28),
  KOREAN3OF5(29),
  MAILMARK(30),
  MATRIX2OF5(31),
  MAXICODE(32),
  MICR_E13B(33),
  MICROPDF(34),
  MICROQR(35),
  MSI(36),
  OCR_A(37),
  OCR_B(38),
  PDF417(39),
  QRCODE(40),
  TLC39(41),
  TRIOPTIC39(42),
  UK_POSTAL(43),
  US_CURRENCY(44),
  USPLANET(45),
  US_POSTAL(46),
  USPOSTNET(47),
  UPCA(48),
  UPCE0(49),
  UPCE1(50),
  US4STATE(51),
  US4STATE_FICS(52);

  companion object {
    fun ofRaw(raw: Int): Decoder? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * An application that will trigger the profile
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AppEntry (
  val packageName: String,
  val activityList: List<String?>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AppEntry {
      val packageName = pigeonVar_list[0] as String
      val activityList = pigeonVar_list[1] as List<String?>
      return AppEntry(packageName, activityList)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      packageName,
      activityList,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PluginIntentParamters (
  val intentOutputEnabled: Boolean? = null,
  val intentAction: String? = null,
  val intentCategory: String? = null,
  val intentDelivery: IntentDelivery? = null,
  val intentUseContentProvider: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PluginIntentParamters {
      val intentOutputEnabled = pigeonVar_list[0] as Boolean?
      val intentAction = pigeonVar_list[1] as String?
      val intentCategory = pigeonVar_list[2] as String?
      val intentDelivery = pigeonVar_list[3] as IntentDelivery?
      val intentUseContentProvider = pigeonVar_list[4] as Boolean?
      return PluginIntentParamters(intentOutputEnabled, intentAction, intentCategory, intentDelivery, intentUseContentProvider)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      intentOutputEnabled,
      intentAction,
      intentCategory,
      intentDelivery,
      intentUseContentProvider,
    )
  }
}

/**
 * Used to configure the barcode plugin. Parameters can be found here
 * https://techdocs.zebra.com/datawedge/13-0/guide/api/setconfig/
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PluginBarcodeParamters (
  /** Configure decoders */
  val decoderConfig: List<DecoderConfigItem?>? = null,
  val dataBarToUpcEan: Boolean? = null,
  val upcEnableMarginlessDecode: Boolean? = null,
  val upcEanSecurityLevel: Long? = null,
  val upcEanSupplemental2: Boolean? = null,
  val upcEanSupplemental5: Boolean? = null,
  val upcEanSupplementalMode: UpcSupplementalMode? = null,
  val upcEanRetryCount: Long? = null,
  val upcEeanLinearDecode: Boolean? = null,
  val upcEanBookland: Boolean? = null,
  val upcEanCoupon: Boolean? = null,
  val upcEanCouponReport: UpcEanCouponReport? = null,
  val upcEanZeroExtend: Boolean? = null,
  val upceanBooklandFormat: UpcEanBooklandFormat? = null,
  val scanningMode: ScanningMode? = null,
  val docCaptureTemplate: String? = null,
  val commonBarcodeDynamicQuantity: Long? = null,
  val barcodeHighlightingEnabled: Boolean? = null,
  val ruleName: String? = null,
  val enableUdiGs1: Boolean? = null,
  val enableUdiHibcc: Boolean? = null,
  val enableUdiIccbba: Boolean? = null,
  val ocrOrientation: OcrOrientation? = null,
  /** Set number of lines to scan during OCR reading: */
  val ocrLines: Long? = null,
  /**
   * Set minimum number of OCR characters (not including spaces) per line to
   * decode during OCR reading. Integer value 3-100
   */
  val ocrMinChars: Long? = null,
  /**
   * Set maximum number of OCR characters (not including spaces) per line to
   * decode during OCR reading. Integer value:
   */
  val ocrMaxChars: Long? = null,
  /** Defines a custom group of characters in place of a preset font variant. */
  val ocrSubset: String? = null,
  /**
   * Set field width of blank space to stop scanning during OCR reading.
   * The default is 50, indicating a six character width quiet zone. 20-99
   */
  val ocrQuietZone: Long? = null,
  /**
   * Creates a template for precisely matching scanned OCR characters to a
   * desired input format, which helps eliminate scanning errors. The template
   * expression is formed by numbers and letters. The default is 99999999 which
   *  accepts any alphanumeric character OCR string. If there are less than
   *  8 '9' characters, the '9' represents only digit values.
   * More info https://techdocs.zebra.com/datawedge/13-0/guide/input/barcode/#ocrparamsocraocrb
   */
  val ocrTemplate: String? = null,
  /** Sets the Check Digit Modulus value for OCR Check Digit Calculation. */
  val ocrCheckDigitModulus: Long? = null,
  /** Sets OCR check digit multipliers for the character positions. */
  val ocrCheckDigitMultiplier: Long? = null,
  /**
   * None - 0 (default)
   * Product Add Left to Right - 3
   * Product Add Right to Left - 1
   * Digit Add Left to Right - 4
   * Digit Add Right to Left - 2
   * Product Add Right to Left Simple Remainder - 5
   * Digit Add Right to Left Simple Remainder - 6
   * Health Industry - HIBCC43 - 9
   */
  val ocrCheckDigitValidation: Long? = null,
  /**
   * White or light words on black or dark background. This option is used
   * to select normal, inverse or both OCR scanning.
   */
  val inverseOcr: InverseOcr? = null,
  val presentationModeSensitivity: PresentationModeSensitivity? = null,
  val enableHardwareTrigger: Boolean? = null,
  val autoSwitchToDefaultOnEvent: SwitchOnEvent? = null,
  val digimarcDecoding: Boolean? = null,
  val multiBarcodeCount: Long? = null,
  val enableInstantReporting: Boolean? = null,
  val reportDecodedBarcodes: Boolean? = null,
  val scannerTriggerResource: TriggerSource? = null,
  val scannerInputEnabled: Boolean? = null,
  val scannerSelection: ScannerIdentifer? = null,
  val configureAllScanners: Boolean? = null,
  val scannerSelectionByIdentifier: String? = null,
  val enableAimMode: Boolean? = null,
  val beamTimer: Long? = null,
  val enableAdaptiveScanning: Boolean? = null,
  val beamWidth: BeamWidth? = null,
  val powerMode: PowerMode? = null,
  val mpdMode: MpdMode? = null,
  val readerMode: ReaderMode? = null,
  val linearSecurityLevel: Long? = null,
  val picklist: PicklistMode? = null,
  val aimType: AimType? = null,
  val sceneDetectQualifier: SceneDetectQualifier? = null,
  val aimTimer: Long? = null,
  val sameBarcodeTimeout: Long? = null,
  val triggerWakeupScan: Boolean? = null,
  val differentBarcodeTimeout: Long? = null,
  val illuminationMode: IlluminationMode? = null,
  val illuminationBrightness: Long? = null,
  val lcdMode: LcdMode? = null,
  val lowPowerTimeout: Long? = null,
  val delayToLowPowerMode: DelayToLowPowerMode? = null,
  val inverse1dMode: Inverse1dMode? = null,
  val viewFinderSize: Long? = null,
  val viewFinderPosX: Long? = null,
  val viewFinderPosY: Long? = null,
  val marginlessEffortLevel1d: EffortLevel? = null,
  val poorQualityBcDecodeEffortLevel: EffortLevel? = null,
  val charsetName: Charset? = null,
  val autoCharsetPrefferedOrder: List<String?>? = null,
  val autoCharsetFallback: Charset? = null,
  val viewFinderMode: ViewFinderMode? = null,
  val codeIdType: CodeIdType? = null,
  val volumeSliderType: VolumeSliderType? = null,
  val decodeAudioFeedbackUri: String? = null,
  val decodeHapticFeedback: Boolean? = null,
  val btDisconnectOnExit: Boolean? = null,
  val connectionIdleTime: Long? = null,
  val establishConnectionTime: Long? = null,
  val remoteScannerAudioFeedbackMode: Long? = null,
  val remoteScannerLedFeedbackMode: Long? = null,
  val displayBtAddressBarcode: Boolean? = null,
  val goodDecodeLedTimer: Long? = null,
  val decodingLedFeedback: Boolean? = null,
  val decoderUsPlanetReportCheckDigit: Boolean? = null,
  val decodeScreenNotification: Boolean? = null,
  /**
   * / Length of time (in milliseconds) to display the screen notification
   * upon successful decode. 500-1500
   */
  val decodeScreenTime: Long? = null,
  /**
   * Sets the translucency value for the decode notification green screen -
   * higher values result to more translucency.
   *  Values range from 20 to 50 in increments of 5:
   */
  val decodeScreenTranslucency: Long? = null,
  /**
   * Enable/disable automatic re-connection to the connected Bluetooth scanner
   *  after device reboot. Applies only to connected Bluetooth scanners:
   */
  val keepParingInfoAfterReboot: Boolean? = null,
  /**
   * Controls the illumination for decoding DPM barcodes.
   * Default value is cycle.
   */
  val dpmIlluminationControl: DpmIlluminationControl? = null,
  /**
   * Optimize DPM barcode decoding performance based on the barcode size.
   * Default is Mode 2
   */
  val dpmMode: DpmMode? = null,
  val qrLaunchEnable: Boolean? = null,
  val qrLaunchEnableQrDecoder: Boolean? = null,
  val qrLaunchShowConfirmationDialog: Boolean? = null,
  /** Integer from 0 to 180000 in 1000 increments */
  val noDecodeTime: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PluginBarcodeParamters {
      val decoderConfig = pigeonVar_list[0] as List<DecoderConfigItem?>?
      val dataBarToUpcEan = pigeonVar_list[1] as Boolean?
      val upcEnableMarginlessDecode = pigeonVar_list[2] as Boolean?
      val upcEanSecurityLevel = pigeonVar_list[3] as Long?
      val upcEanSupplemental2 = pigeonVar_list[4] as Boolean?
      val upcEanSupplemental5 = pigeonVar_list[5] as Boolean?
      val upcEanSupplementalMode = pigeonVar_list[6] as UpcSupplementalMode?
      val upcEanRetryCount = pigeonVar_list[7] as Long?
      val upcEeanLinearDecode = pigeonVar_list[8] as Boolean?
      val upcEanBookland = pigeonVar_list[9] as Boolean?
      val upcEanCoupon = pigeonVar_list[10] as Boolean?
      val upcEanCouponReport = pigeonVar_list[11] as UpcEanCouponReport?
      val upcEanZeroExtend = pigeonVar_list[12] as Boolean?
      val upceanBooklandFormat = pigeonVar_list[13] as UpcEanBooklandFormat?
      val scanningMode = pigeonVar_list[14] as ScanningMode?
      val docCaptureTemplate = pigeonVar_list[15] as String?
      val commonBarcodeDynamicQuantity = pigeonVar_list[16] as Long?
      val barcodeHighlightingEnabled = pigeonVar_list[17] as Boolean?
      val ruleName = pigeonVar_list[18] as String?
      val enableUdiGs1 = pigeonVar_list[19] as Boolean?
      val enableUdiHibcc = pigeonVar_list[20] as Boolean?
      val enableUdiIccbba = pigeonVar_list[21] as Boolean?
      val ocrOrientation = pigeonVar_list[22] as OcrOrientation?
      val ocrLines = pigeonVar_list[23] as Long?
      val ocrMinChars = pigeonVar_list[24] as Long?
      val ocrMaxChars = pigeonVar_list[25] as Long?
      val ocrSubset = pigeonVar_list[26] as String?
      val ocrQuietZone = pigeonVar_list[27] as Long?
      val ocrTemplate = pigeonVar_list[28] as String?
      val ocrCheckDigitModulus = pigeonVar_list[29] as Long?
      val ocrCheckDigitMultiplier = pigeonVar_list[30] as Long?
      val ocrCheckDigitValidation = pigeonVar_list[31] as Long?
      val inverseOcr = pigeonVar_list[32] as InverseOcr?
      val presentationModeSensitivity = pigeonVar_list[33] as PresentationModeSensitivity?
      val enableHardwareTrigger = pigeonVar_list[34] as Boolean?
      val autoSwitchToDefaultOnEvent = pigeonVar_list[35] as SwitchOnEvent?
      val digimarcDecoding = pigeonVar_list[36] as Boolean?
      val multiBarcodeCount = pigeonVar_list[37] as Long?
      val enableInstantReporting = pigeonVar_list[38] as Boolean?
      val reportDecodedBarcodes = pigeonVar_list[39] as Boolean?
      val scannerTriggerResource = pigeonVar_list[40] as TriggerSource?
      val scannerInputEnabled = pigeonVar_list[41] as Boolean?
      val scannerSelection = pigeonVar_list[42] as ScannerIdentifer?
      val configureAllScanners = pigeonVar_list[43] as Boolean?
      val scannerSelectionByIdentifier = pigeonVar_list[44] as String?
      val enableAimMode = pigeonVar_list[45] as Boolean?
      val beamTimer = pigeonVar_list[46] as Long?
      val enableAdaptiveScanning = pigeonVar_list[47] as Boolean?
      val beamWidth = pigeonVar_list[48] as BeamWidth?
      val powerMode = pigeonVar_list[49] as PowerMode?
      val mpdMode = pigeonVar_list[50] as MpdMode?
      val readerMode = pigeonVar_list[51] as ReaderMode?
      val linearSecurityLevel = pigeonVar_list[52] as Long?
      val picklist = pigeonVar_list[53] as PicklistMode?
      val aimType = pigeonVar_list[54] as AimType?
      val sceneDetectQualifier = pigeonVar_list[55] as SceneDetectQualifier?
      val aimTimer = pigeonVar_list[56] as Long?
      val sameBarcodeTimeout = pigeonVar_list[57] as Long?
      val triggerWakeupScan = pigeonVar_list[58] as Boolean?
      val differentBarcodeTimeout = pigeonVar_list[59] as Long?
      val illuminationMode = pigeonVar_list[60] as IlluminationMode?
      val illuminationBrightness = pigeonVar_list[61] as Long?
      val lcdMode = pigeonVar_list[62] as LcdMode?
      val lowPowerTimeout = pigeonVar_list[63] as Long?
      val delayToLowPowerMode = pigeonVar_list[64] as DelayToLowPowerMode?
      val inverse1dMode = pigeonVar_list[65] as Inverse1dMode?
      val viewFinderSize = pigeonVar_list[66] as Long?
      val viewFinderPosX = pigeonVar_list[67] as Long?
      val viewFinderPosY = pigeonVar_list[68] as Long?
      val marginlessEffortLevel1d = pigeonVar_list[69] as EffortLevel?
      val poorQualityBcDecodeEffortLevel = pigeonVar_list[70] as EffortLevel?
      val charsetName = pigeonVar_list[71] as Charset?
      val autoCharsetPrefferedOrder = pigeonVar_list[72] as List<String?>?
      val autoCharsetFallback = pigeonVar_list[73] as Charset?
      val viewFinderMode = pigeonVar_list[74] as ViewFinderMode?
      val codeIdType = pigeonVar_list[75] as CodeIdType?
      val volumeSliderType = pigeonVar_list[76] as VolumeSliderType?
      val decodeAudioFeedbackUri = pigeonVar_list[77] as String?
      val decodeHapticFeedback = pigeonVar_list[78] as Boolean?
      val btDisconnectOnExit = pigeonVar_list[79] as Boolean?
      val connectionIdleTime = pigeonVar_list[80] as Long?
      val establishConnectionTime = pigeonVar_list[81] as Long?
      val remoteScannerAudioFeedbackMode = pigeonVar_list[82] as Long?
      val remoteScannerLedFeedbackMode = pigeonVar_list[83] as Long?
      val displayBtAddressBarcode = pigeonVar_list[84] as Boolean?
      val goodDecodeLedTimer = pigeonVar_list[85] as Long?
      val decodingLedFeedback = pigeonVar_list[86] as Boolean?
      val decoderUsPlanetReportCheckDigit = pigeonVar_list[87] as Boolean?
      val decodeScreenNotification = pigeonVar_list[88] as Boolean?
      val decodeScreenTime = pigeonVar_list[89] as Long?
      val decodeScreenTranslucency = pigeonVar_list[90] as Long?
      val keepParingInfoAfterReboot = pigeonVar_list[91] as Boolean?
      val dpmIlluminationControl = pigeonVar_list[92] as DpmIlluminationControl?
      val dpmMode = pigeonVar_list[93] as DpmMode?
      val qrLaunchEnable = pigeonVar_list[94] as Boolean?
      val qrLaunchEnableQrDecoder = pigeonVar_list[95] as Boolean?
      val qrLaunchShowConfirmationDialog = pigeonVar_list[96] as Boolean?
      val noDecodeTime = pigeonVar_list[97] as Long?
      return PluginBarcodeParamters(decoderConfig, dataBarToUpcEan, upcEnableMarginlessDecode, upcEanSecurityLevel, upcEanSupplemental2, upcEanSupplemental5, upcEanSupplementalMode, upcEanRetryCount, upcEeanLinearDecode, upcEanBookland, upcEanCoupon, upcEanCouponReport, upcEanZeroExtend, upceanBooklandFormat, scanningMode, docCaptureTemplate, commonBarcodeDynamicQuantity, barcodeHighlightingEnabled, ruleName, enableUdiGs1, enableUdiHibcc, enableUdiIccbba, ocrOrientation, ocrLines, ocrMinChars, ocrMaxChars, ocrSubset, ocrQuietZone, ocrTemplate, ocrCheckDigitModulus, ocrCheckDigitMultiplier, ocrCheckDigitValidation, inverseOcr, presentationModeSensitivity, enableHardwareTrigger, autoSwitchToDefaultOnEvent, digimarcDecoding, multiBarcodeCount, enableInstantReporting, reportDecodedBarcodes, scannerTriggerResource, scannerInputEnabled, scannerSelection, configureAllScanners, scannerSelectionByIdentifier, enableAimMode, beamTimer, enableAdaptiveScanning, beamWidth, powerMode, mpdMode, readerMode, linearSecurityLevel, picklist, aimType, sceneDetectQualifier, aimTimer, sameBarcodeTimeout, triggerWakeupScan, differentBarcodeTimeout, illuminationMode, illuminationBrightness, lcdMode, lowPowerTimeout, delayToLowPowerMode, inverse1dMode, viewFinderSize, viewFinderPosX, viewFinderPosY, marginlessEffortLevel1d, poorQualityBcDecodeEffortLevel, charsetName, autoCharsetPrefferedOrder, autoCharsetFallback, viewFinderMode, codeIdType, volumeSliderType, decodeAudioFeedbackUri, decodeHapticFeedback, btDisconnectOnExit, connectionIdleTime, establishConnectionTime, remoteScannerAudioFeedbackMode, remoteScannerLedFeedbackMode, displayBtAddressBarcode, goodDecodeLedTimer, decodingLedFeedback, decoderUsPlanetReportCheckDigit, decodeScreenNotification, decodeScreenTime, decodeScreenTranslucency, keepParingInfoAfterReboot, dpmIlluminationControl, dpmMode, qrLaunchEnable, qrLaunchEnableQrDecoder, qrLaunchShowConfirmationDialog, noDecodeTime)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      decoderConfig,
      dataBarToUpcEan,
      upcEnableMarginlessDecode,
      upcEanSecurityLevel,
      upcEanSupplemental2,
      upcEanSupplemental5,
      upcEanSupplementalMode,
      upcEanRetryCount,
      upcEeanLinearDecode,
      upcEanBookland,
      upcEanCoupon,
      upcEanCouponReport,
      upcEanZeroExtend,
      upceanBooklandFormat,
      scanningMode,
      docCaptureTemplate,
      commonBarcodeDynamicQuantity,
      barcodeHighlightingEnabled,
      ruleName,
      enableUdiGs1,
      enableUdiHibcc,
      enableUdiIccbba,
      ocrOrientation,
      ocrLines,
      ocrMinChars,
      ocrMaxChars,
      ocrSubset,
      ocrQuietZone,
      ocrTemplate,
      ocrCheckDigitModulus,
      ocrCheckDigitMultiplier,
      ocrCheckDigitValidation,
      inverseOcr,
      presentationModeSensitivity,
      enableHardwareTrigger,
      autoSwitchToDefaultOnEvent,
      digimarcDecoding,
      multiBarcodeCount,
      enableInstantReporting,
      reportDecodedBarcodes,
      scannerTriggerResource,
      scannerInputEnabled,
      scannerSelection,
      configureAllScanners,
      scannerSelectionByIdentifier,
      enableAimMode,
      beamTimer,
      enableAdaptiveScanning,
      beamWidth,
      powerMode,
      mpdMode,
      readerMode,
      linearSecurityLevel,
      picklist,
      aimType,
      sceneDetectQualifier,
      aimTimer,
      sameBarcodeTimeout,
      triggerWakeupScan,
      differentBarcodeTimeout,
      illuminationMode,
      illuminationBrightness,
      lcdMode,
      lowPowerTimeout,
      delayToLowPowerMode,
      inverse1dMode,
      viewFinderSize,
      viewFinderPosX,
      viewFinderPosY,
      marginlessEffortLevel1d,
      poorQualityBcDecodeEffortLevel,
      charsetName,
      autoCharsetPrefferedOrder,
      autoCharsetFallback,
      viewFinderMode,
      codeIdType,
      volumeSliderType,
      decodeAudioFeedbackUri,
      decodeHapticFeedback,
      btDisconnectOnExit,
      connectionIdleTime,
      establishConnectionTime,
      remoteScannerAudioFeedbackMode,
      remoteScannerLedFeedbackMode,
      displayBtAddressBarcode,
      goodDecodeLedTimer,
      decodingLedFeedback,
      decoderUsPlanetReportCheckDigit,
      decodeScreenNotification,
      decodeScreenTime,
      decodeScreenTranslucency,
      keepParingInfoAfterReboot,
      dpmIlluminationControl,
      dpmMode,
      qrLaunchEnable,
      qrLaunchEnableQrDecoder,
      qrLaunchShowConfirmationDialog,
      noDecodeTime,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PluginConfig (
  val resetConfig: Boolean,
  val pluginName: PluginName,
  val outputPluginName: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PluginConfig {
      val resetConfig = pigeonVar_list[0] as Boolean
      val pluginName = pigeonVar_list[1] as PluginName
      val outputPluginName = pigeonVar_list[2] as String?
      return PluginConfig(resetConfig, pluginName, outputPluginName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      resetConfig,
      pluginName,
      outputPluginName,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ProfileConfig (
  val profileName: String,
  val configMode: ConfigMode,
  val barcodeParamters: PluginBarcodeParamters? = null,
  val intentParamters: PluginIntentParamters? = null,
  val profileEnabled: Boolean,
  val appList: List<AppEntry?>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ProfileConfig {
      val profileName = pigeonVar_list[0] as String
      val configMode = pigeonVar_list[1] as ConfigMode
      val barcodeParamters = pigeonVar_list[2] as PluginBarcodeParamters?
      val intentParamters = pigeonVar_list[3] as PluginIntentParamters?
      val profileEnabled = pigeonVar_list[4] as Boolean
      val appList = pigeonVar_list[5] as List<AppEntry?>?
      return ProfileConfig(profileName, configMode, barcodeParamters, intentParamters, profileEnabled, appList)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      profileName,
      configMode,
      barcodeParamters,
      intentParamters,
      profileEnabled,
      appList,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ScanEvent (
  val labelType: LabelType,
  val source: ScanSource,
  val dataString: String,
  val decodeData: List<ByteArray?>,
  val decodeMode: DecodeMode
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ScanEvent {
      val labelType = pigeonVar_list[0] as LabelType
      val source = pigeonVar_list[1] as ScanSource
      val dataString = pigeonVar_list[2] as String
      val decodeData = pigeonVar_list[3] as List<ByteArray?>
      val decodeMode = pigeonVar_list[4] as DecodeMode
      return ScanEvent(labelType, source, dataString, decodeData, decodeMode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      labelType,
      source,
      dataString,
      decodeData,
      decodeMode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ActionResult (
  val result: Boolean,
  val resultInfo: Map<String, Any>? = null,
  val message: String,
  val command: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): ActionResult {
      val result = pigeonVar_list[0] as Boolean
      val resultInfo = pigeonVar_list[1] as Map<String, Any>?
      val message = pigeonVar_list[2] as String
      val command = pigeonVar_list[3] as String?
      return ActionResult(result, resultInfo, message, command)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      result,
      resultInfo,
      message,
      command,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class StatusChangeEvent (
  val newState: ScannerState
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): StatusChangeEvent {
      val newState = pigeonVar_list[0] as ScannerState
      return StatusChangeEvent(newState)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      newState,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DecoderConfigItem (
  val decoder: Decoder? = null,
  val enabled: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): DecoderConfigItem {
      val decoder = pigeonVar_list[0] as Decoder?
      val enabled = pigeonVar_list[1] as Boolean?
      return DecoderConfigItem(decoder, enabled)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      decoder,
      enabled,
    )
  }
}
private open class PigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ConfigMode.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PluginName.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ScannerIdentifer.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          UpcSupplementalMode.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          UpcEanCouponReport.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          UpcEanBooklandFormat.ofRaw(it.toInt())
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ScanningMode.ofRaw(it.toInt())
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          InverseOcr.ofRaw(it.toInt())
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          OcrOrientation.ofRaw(it.toInt())
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          IntentDelivery.ofRaw(it.toInt())
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          DpmMode.ofRaw(it.toInt())
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BeamWidth.ofRaw(it.toInt())
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PowerMode.ofRaw(it.toInt())
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          MpdMode.ofRaw(it.toInt())
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PicklistMode.ofRaw(it.toInt())
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ReaderMode.ofRaw(it.toInt())
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          TriggerSource.ofRaw(it.toInt())
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          DpmIlluminationControl.ofRaw(it.toInt())
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          VolumeSliderType.ofRaw(it.toInt())
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CodeIdType.ofRaw(it.toInt())
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ViewFinderMode.ofRaw(it.toInt())
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Charset.ofRaw(it.toInt())
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          EffortLevel.ofRaw(it.toInt())
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Inverse1dMode.ofRaw(it.toInt())
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          DelayToLowPowerMode.ofRaw(it.toInt())
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          LcdMode.ofRaw(it.toInt())
        }
      }
      155.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          IlluminationMode.ofRaw(it.toInt())
        }
      }
      156.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          SceneDetectQualifier.ofRaw(it.toInt())
        }
      }
      157.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AimType.ofRaw(it.toInt())
        }
      }
      158.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          SwitchOnEvent.ofRaw(it.toInt())
        }
      }
      159.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PresentationModeSensitivity.ofRaw(it.toInt())
        }
      }
      160.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          DatawedgeApiTargets.ofRaw(it.toInt())
        }
      }
      161.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          LabelType.ofRaw(it.toInt())
        }
      }
      162.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ScanSource.ofRaw(it.toInt())
        }
      }
      163.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          DecodeMode.ofRaw(it.toInt())
        }
      }
      164.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ScannerState.ofRaw(it.toInt())
        }
      }
      165.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Decoder.ofRaw(it.toInt())
        }
      }
      166.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppEntry.fromList(it)
        }
      }
      167.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PluginIntentParamters.fromList(it)
        }
      }
      168.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PluginBarcodeParamters.fromList(it)
        }
      }
      169.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PluginConfig.fromList(it)
        }
      }
      170.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ProfileConfig.fromList(it)
        }
      }
      171.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ScanEvent.fromList(it)
        }
      }
      172.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ActionResult.fromList(it)
        }
      }
      173.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          StatusChangeEvent.fromList(it)
        }
      }
      174.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DecoderConfigItem.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ConfigMode -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is PluginName -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is ScannerIdentifer -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is UpcSupplementalMode -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is UpcEanCouponReport -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is UpcEanBooklandFormat -> {
        stream.write(134)
        writeValue(stream, value.raw)
      }
      is ScanningMode -> {
        stream.write(135)
        writeValue(stream, value.raw)
      }
      is InverseOcr -> {
        stream.write(136)
        writeValue(stream, value.raw)
      }
      is OcrOrientation -> {
        stream.write(137)
        writeValue(stream, value.raw)
      }
      is IntentDelivery -> {
        stream.write(138)
        writeValue(stream, value.raw)
      }
      is DpmMode -> {
        stream.write(139)
        writeValue(stream, value.raw)
      }
      is BeamWidth -> {
        stream.write(140)
        writeValue(stream, value.raw)
      }
      is PowerMode -> {
        stream.write(141)
        writeValue(stream, value.raw)
      }
      is MpdMode -> {
        stream.write(142)
        writeValue(stream, value.raw)
      }
      is PicklistMode -> {
        stream.write(143)
        writeValue(stream, value.raw)
      }
      is ReaderMode -> {
        stream.write(144)
        writeValue(stream, value.raw)
      }
      is TriggerSource -> {
        stream.write(145)
        writeValue(stream, value.raw)
      }
      is DpmIlluminationControl -> {
        stream.write(146)
        writeValue(stream, value.raw)
      }
      is VolumeSliderType -> {
        stream.write(147)
        writeValue(stream, value.raw)
      }
      is CodeIdType -> {
        stream.write(148)
        writeValue(stream, value.raw)
      }
      is ViewFinderMode -> {
        stream.write(149)
        writeValue(stream, value.raw)
      }
      is Charset -> {
        stream.write(150)
        writeValue(stream, value.raw)
      }
      is EffortLevel -> {
        stream.write(151)
        writeValue(stream, value.raw)
      }
      is Inverse1dMode -> {
        stream.write(152)
        writeValue(stream, value.raw)
      }
      is DelayToLowPowerMode -> {
        stream.write(153)
        writeValue(stream, value.raw)
      }
      is LcdMode -> {
        stream.write(154)
        writeValue(stream, value.raw)
      }
      is IlluminationMode -> {
        stream.write(155)
        writeValue(stream, value.raw)
      }
      is SceneDetectQualifier -> {
        stream.write(156)
        writeValue(stream, value.raw)
      }
      is AimType -> {
        stream.write(157)
        writeValue(stream, value.raw)
      }
      is SwitchOnEvent -> {
        stream.write(158)
        writeValue(stream, value.raw)
      }
      is PresentationModeSensitivity -> {
        stream.write(159)
        writeValue(stream, value.raw)
      }
      is DatawedgeApiTargets -> {
        stream.write(160)
        writeValue(stream, value.raw)
      }
      is LabelType -> {
        stream.write(161)
        writeValue(stream, value.raw)
      }
      is ScanSource -> {
        stream.write(162)
        writeValue(stream, value.raw)
      }
      is DecodeMode -> {
        stream.write(163)
        writeValue(stream, value.raw)
      }
      is ScannerState -> {
        stream.write(164)
        writeValue(stream, value.raw)
      }
      is Decoder -> {
        stream.write(165)
        writeValue(stream, value.raw)
      }
      is AppEntry -> {
        stream.write(166)
        writeValue(stream, value.toList())
      }
      is PluginIntentParamters -> {
        stream.write(167)
        writeValue(stream, value.toList())
      }
      is PluginBarcodeParamters -> {
        stream.write(168)
        writeValue(stream, value.toList())
      }
      is PluginConfig -> {
        stream.write(169)
        writeValue(stream, value.toList())
      }
      is ProfileConfig -> {
        stream.write(170)
        writeValue(stream, value.toList())
      }
      is ScanEvent -> {
        stream.write(171)
        writeValue(stream, value.toList())
      }
      is ActionResult -> {
        stream.write(172)
        writeValue(stream, value.toList())
      }
      is StatusChangeEvent -> {
        stream.write(173)
        writeValue(stream, value.toList())
      }
      is DecoderConfigItem -> {
        stream.write(174)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class DataWedgeFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by DataWedgeFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
  }
  fun onScannerStatusChanged(statusEventArg: StatusChangeEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScannerStatusChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(statusEventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onScanResult(scanEventArg: ScanEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScanResult$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(scanEventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onProfileChange(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onProfileChange$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onConfigUpdate(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onConfigUpdate$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onCommandResult(resultArg: ActionResult, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onCommandResult$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(resultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface DataWedgeHostApi {
  fun createProfile(profileName: String, callback: (Result<Unit>) -> Unit)
  fun registerForNotifications()
  fun unregisterForNotifications()
  fun suspendPlugin(callback: (Result<String>) -> Unit)
  fun resumePlugin(callback: (Result<String>) -> Unit)
  fun enablePlugin(callback: (Result<String>) -> Unit)
  fun disablePlugin(callback: (Result<String>) -> Unit)
  fun softScanTrigger(on: Boolean, callback: (Result<String>) -> Unit)
  fun getPackageIdentifer(): String
  fun setDecoder(decoder: Decoder, enabled: Boolean, profileName: String, callback: (Result<Unit>) -> Unit)
  fun setProfileConfig(config: ProfileConfig, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by DataWedgeHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonPigeonCodec()
    }
    /** Sets up an instance of `DataWedgeHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: DataWedgeHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.createProfile$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val profileNameArg = args[0] as String
            api.createProfile(profileNameArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.registerForNotifications$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.registerForNotifications()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.unregisterForNotifications$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.unregisterForNotifications()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.suspendPlugin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.suspendPlugin{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.resumePlugin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.resumePlugin{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.enablePlugin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.enablePlugin{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.disablePlugin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.disablePlugin{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.softScanTrigger$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val onArg = args[0] as Boolean
            api.softScanTrigger(onArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.getPackageIdentifer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getPackageIdentifer())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.setDecoder$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val decoderArg = args[0] as Decoder
            val enabledArg = args[1] as Boolean
            val profileNameArg = args[2] as String
            api.setDecoder(decoderArg, enabledArg, profileNameArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.setProfileConfig$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as ProfileConfig
            api.setProfileConfig(configArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
