// Autogenerated from Pigeon (v22.6.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// Mode for profile creations
enum ConfigMode {
  createIfNotExists,
  overwrite,
  update,
}

/// Plugin to be configured
enum PluginName {
  barcode,
  msr,
  rfid,
  serial,
  voice,
  workflow,
  bdf,
  adf,
  tokens,
  intent,
  keystroke,
  ip,
  dcp,
  ekb,
}

enum ScannerIdentifer {
  auto,
  internalImager,
  internalLaser,
  internalCamera,
  serialSSI,
  bluetoothSSI,
  bluetoothRS6000,
  bluetoothDS2278,
  bluetoothDS3678,
  plugableSsi,
  plugableSsiRS5000,
  usbSsiDS3608,
  bluetoothZebra,
  usbZebra,
}

enum UpcSupplementalMode {
  none,
  always,
  auto,
  smart,
  supplemental378to379,
  supplemental978to979,
  supplemental414to419and434to439,
  supplemental977,
}

enum UpcEanCouponReport {
  oldMode,
  newMode,
  both,
}

enum UpcEanBooklandFormat {
  isbn10,
  isbn13,
}

enum ScanningMode {
  single,
  udi,
  multiBarcode,
  documentCapture,
}

enum InverseOcr {
  regular,
  inverse,
  auto,
}

enum OcrOrientation {
  degree_0,
  degree_90,
  degree_180,
  degree_270,
  omnidirectional,
}

enum IntentDelivery {
  startActivity,
  startService,
  broadcast,
}

enum DpmMode {
  disabled,
  mode1,
  mode2,
}

enum BeamWidth {
  narrow,
  normal,
  wide,
}

enum PowerMode {
  low,
  high,
  alwaysOn,
  optimized,
}

enum MpdMode {
  display_off,
  display_on,
}

enum PicklistMode {
  disabled,
  hardware,
  software,
}

enum ReaderMode {
  triggered,
  presentation,
}

enum TriggerSource {
  left,
  right,
  center,
  gun,
  proximity,
  keyMapperScan,
  keyMapperL1,
  keyMapperR1,
  wiredLeft,
  wiredRight,
}

enum DpmIlluminationControl {
  direct,
  indirect,
  cycle,
}

enum VolumeSliderType {
  ringer,
  musicMedia,
  alarms,
  notification,
}

enum CodeIdType {
  none,
  aim,
  symbol,
}

enum ViewFinderMode {
  enabled,
  staticReticle,
}

enum Charset {
  auto,
  utf8,
  iso88591,
  shiftJis,
  gb18030,
  none,
}

enum EffortLevel {
  level_0,
  level_1,
  level_2,
  level_3,
}

enum Inverse1dMode {
  disable,
  enable,
  auto,
}

enum DelayToLowPowerMode {
  seconds_1,
  seconds_30,
  minutes_1,
  minutes_5,
}

enum LcdMode {
  disabled,
  enabled,
}

enum IlluminationMode {
  off,
  torch,
}

enum SceneDetectQualifier {
  none,
  proximitySensor,
}

enum AimType {
  trigger,
  timedHold,
  timedRelease,
  pressAndRelease,
  presentation,
  continousRead,
  pressAndSustain,
  pressAndContinue,
  timedContinous,
}

enum SwitchOnEvent {
  disabled,
  onConnect,
  onDisconnect,
  connectOrDisconnect,
}

enum PresentationModeSensitivity {
  high,
  medium,
  low,
}

enum DatawedgeApiTargets {
  softScanTrigger,
  scannerPlugin,
  getProfiles,
  getActiveProfile,
}

enum LabelType {
  code39,
  codabar,
  code128,
  d2of5,
  iata2of5,
  i2of5,
  code93,
  upca,
  upce0,
  upce1,
  ean8,
  ean13,
  msi,
  ean128,
  trioptic39,
  bookland,
  coupon,
  databarCoupon,
  isbt128,
  code32,
  pdf417,
  micropdf,
  tlc39,
  code11,
  maxicode,
  datamatrix,
  qrcode,
  gs1Databar,
  gs1DatabarLim,
  gs1DatabarExp,
  uspostnet,
  usplanet,
  ukpostal,
  jappostal,
  auspostal,
  dutchpostal,
  finnishpostal4s,
  canpostal,
  chinese2of5,
  aztec,
  microqr,
  us4state,
  us4stateFics,
  compositeAb,
  compositeC,
  webcode,
  signature,
  korean3of5,
  matrix2of5,
  ocr,
  hanxin,
  mailmark,
  format,
  gs1Datamatrix,
  gs1Qrcode,
  dotcode,
  gridmatrix,
  undefined,
}

enum ScanSource {
  msr,
  scanner,
  simulscan,
  serial,
  voice,
  rfid,
}

enum DecodeMode {
  multiple,
  single,
}

enum ScannerState {
  waiting,
  scanning,
  idle,
  connected,
  disconnected,
  disabled,
}

enum Decoder {
  australianPostal,
  aztec,
  canadianPostal,
  chinese2of5,
  codabar,
  code11,
  code32,
  code39,
  code93,
  code128,
  compositeAb,
  compositeC,
  datamatrix,
  signature,
  d2of5,
  dotcode,
  dutchPostal,
  ean8,
  ean13,
  finnishPostal4s,
  gridMatrix,
  gs1Databar,
  gs1DatabarLim,
  gs1DatabarExp,
  gs1Datamatrix,
  gs1Qrcode,
  hanxin,
  i2of5,
  japanesePostal,
  korean3of5,
  mailmark,
  matrix2of5,
  maxicode,
  micrE13b,
  micropdf,
  microqr,
  msi,
  ocrA,
  ocrB,
  pdf417,
  qrcode,
  tlc39,
  trioptic39,
  ukPostal,
  usCurrency,
  usplanet,
  usPostal,
  uspostnet,
  upca,
  upce0,
  upce1,
  us4state,
  us4stateFics,
}

/// An application that will trigger the profile
class AppEntry {
  AppEntry({
    required this.packageName,
    required this.activityList,
  });

  String packageName;

  List<String?> activityList;

  Object encode() {
    return <Object?>[
      packageName,
      activityList,
    ];
  }

  static AppEntry decode(Object result) {
    result as List<Object?>;
    return AppEntry(
      packageName: result[0]! as String,
      activityList: (result[1] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class PluginIntentParamters {
  PluginIntentParamters({
    this.intentOutputEnabled,
    this.intentAction,
    this.intentCategory,
    this.intentDelivery,
    this.intentUseContentProvider,
  });

  bool? intentOutputEnabled;

  String? intentAction;

  String? intentCategory;

  IntentDelivery? intentDelivery;

  bool? intentUseContentProvider;

  Object encode() {
    return <Object?>[
      intentOutputEnabled,
      intentAction,
      intentCategory,
      intentDelivery,
      intentUseContentProvider,
    ];
  }

  static PluginIntentParamters decode(Object result) {
    result as List<Object?>;
    return PluginIntentParamters(
      intentOutputEnabled: result[0] as bool?,
      intentAction: result[1] as String?,
      intentCategory: result[2] as String?,
      intentDelivery: result[3] as IntentDelivery?,
      intentUseContentProvider: result[4] as bool?,
    );
  }
}

/// Used to configure the barcode plugin. Parameters can be found here
/// https://techdocs.zebra.com/datawedge/13-0/guide/api/setconfig/
class PluginBarcodeParamters {
  PluginBarcodeParamters({
    this.decoderConfig,
    this.dataBarToUpcEan,
    this.upcEnableMarginlessDecode,
    this.upcEanSecurityLevel,
    this.upcEanSupplemental2,
    this.upcEanSupplemental5,
    this.upcEanSupplementalMode,
    this.upcEanRetryCount,
    this.upcEeanLinearDecode,
    this.upcEanBookland,
    this.upcEanCoupon,
    this.upcEanCouponReport,
    this.upcEanZeroExtend,
    this.upceanBooklandFormat,
    this.scanningMode,
    this.docCaptureTemplate,
    this.commonBarcodeDynamicQuantity,
    this.barcodeHighlightingEnabled,
    this.ruleName,
    this.enableUdiGs1,
    this.enableUdiHibcc,
    this.enableUdiIccbba,
    this.ocrOrientation,
    this.ocrLines,
    this.ocrMinChars,
    this.ocrMaxChars,
    this.ocrSubset,
    this.ocrQuietZone,
    this.ocrTemplate,
    this.ocrCheckDigitModulus,
    this.ocrCheckDigitMultiplier,
    this.ocrCheckDigitValidation,
    this.inverseOcr,
    this.presentationModeSensitivity,
    this.enableHardwareTrigger,
    this.autoSwitchToDefaultOnEvent,
    this.digimarcDecoding,
    this.multiBarcodeCount,
    this.enableInstantReporting,
    this.reportDecodedBarcodes,
    this.scannerTriggerResource,
    this.scannerInputEnabled,
    this.scannerSelection,
    this.configureAllScanners,
    this.scannerSelectionByIdentifier,
    this.enableAimMode,
    this.beamTimer,
    this.enableAdaptiveScanning,
    this.beamWidth,
    this.powerMode,
    this.mpdMode,
    this.readerMode,
    this.linearSecurityLevel,
    this.picklist,
    this.aimType,
    this.sceneDetectQualifier,
    this.aimTimer,
    this.sameBarcodeTimeout,
    this.triggerWakeupScan,
    this.differentBarcodeTimeout,
    this.illuminationMode,
    this.illuminationBrightness,
    this.lcdMode,
    this.lowPowerTimeout,
    this.delayToLowPowerMode,
    this.inverse1dMode,
    this.viewFinderSize,
    this.viewFinderPosX,
    this.viewFinderPosY,
    this.marginlessEffortLevel1d,
    this.poorQualityBcDecodeEffortLevel,
    this.charsetName,
    this.autoCharsetPrefferedOrder,
    this.autoCharsetFallback,
    this.viewFinderMode,
    this.codeIdType,
    this.volumeSliderType,
    this.decodeAudioFeedbackUri,
    this.decodeHapticFeedback,
    this.btDisconnectOnExit,
    this.connectionIdleTime,
    this.establishConnectionTime,
    this.remoteScannerAudioFeedbackMode,
    this.remoteScannerLedFeedbackMode,
    this.displayBtAddressBarcode,
    this.goodDecodeLedTimer,
    this.decodingLedFeedback,
    this.decoderUsPlanetReportCheckDigit,
    this.decodeScreenNotification,
    this.decodeScreenTime,
    this.decodeScreenTranslucency,
    this.keepParingInfoAfterReboot,
    this.dpmIlluminationControl,
    this.dpmMode,
    this.qrLaunchEnable,
    this.qrLaunchEnableQrDecoder,
    this.qrLaunchShowConfirmationDialog,
    this.noDecodeTime,
  });

  /// Configure decoders
  List<DecoderConfigItem?>? decoderConfig;

  bool? dataBarToUpcEan;

  bool? upcEnableMarginlessDecode;

  int? upcEanSecurityLevel;

  bool? upcEanSupplemental2;

  bool? upcEanSupplemental5;

  UpcSupplementalMode? upcEanSupplementalMode;

  int? upcEanRetryCount;

  bool? upcEeanLinearDecode;

  bool? upcEanBookland;

  bool? upcEanCoupon;

  UpcEanCouponReport? upcEanCouponReport;

  bool? upcEanZeroExtend;

  UpcEanBooklandFormat? upceanBooklandFormat;

  ScanningMode? scanningMode;

  String? docCaptureTemplate;

  int? commonBarcodeDynamicQuantity;

  bool? barcodeHighlightingEnabled;

  String? ruleName;

  bool? enableUdiGs1;

  bool? enableUdiHibcc;

  bool? enableUdiIccbba;

  OcrOrientation? ocrOrientation;

  /// Set number of lines to scan during OCR reading:
  int? ocrLines;

  /// Set minimum number of OCR characters (not including spaces) per line to
  /// decode during OCR reading. Integer value 3-100
  int? ocrMinChars;

  /// Set maximum number of OCR characters (not including spaces) per line to
  /// decode during OCR reading. Integer value:
  int? ocrMaxChars;

  /// Defines a custom group of characters in place of a preset font variant.
  String? ocrSubset;

  /// Set field width of blank space to stop scanning during OCR reading.
  /// The default is 50, indicating a six character width quiet zone. 20-99
  int? ocrQuietZone;

  /// Creates a template for precisely matching scanned OCR characters to a
  /// desired input format, which helps eliminate scanning errors. The template
  /// expression is formed by numbers and letters. The default is 99999999 which
  ///  accepts any alphanumeric character OCR string. If there are less than
  ///  8 '9' characters, the '9' represents only digit values.
  /// More info https://techdocs.zebra.com/datawedge/13-0/guide/input/barcode/#ocrparamsocraocrb
  String? ocrTemplate;

  /// Sets the Check Digit Modulus value for OCR Check Digit Calculation.
  int? ocrCheckDigitModulus;

  /// Sets OCR check digit multipliers for the character positions.
  int? ocrCheckDigitMultiplier;

  /// None - 0 (default)
  /// Product Add Left to Right - 3
  /// Product Add Right to Left - 1
  /// Digit Add Left to Right - 4
  /// Digit Add Right to Left - 2
  /// Product Add Right to Left Simple Remainder - 5
  /// Digit Add Right to Left Simple Remainder - 6
  /// Health Industry - HIBCC43 - 9
  int? ocrCheckDigitValidation;

  /// White or light words on black or dark background. This option is used
  /// to select normal, inverse or both OCR scanning.
  InverseOcr? inverseOcr;

  PresentationModeSensitivity? presentationModeSensitivity;

  bool? enableHardwareTrigger;

  SwitchOnEvent? autoSwitchToDefaultOnEvent;

  bool? digimarcDecoding;

  int? multiBarcodeCount;

  bool? enableInstantReporting;

  bool? reportDecodedBarcodes;

  TriggerSource? scannerTriggerResource;

  bool? scannerInputEnabled;

  ScannerIdentifer? scannerSelection;

  bool? configureAllScanners;

  String? scannerSelectionByIdentifier;

  bool? enableAimMode;

  int? beamTimer;

  bool? enableAdaptiveScanning;

  BeamWidth? beamWidth;

  PowerMode? powerMode;

  MpdMode? mpdMode;

  ReaderMode? readerMode;

  int? linearSecurityLevel;

  PicklistMode? picklist;

  AimType? aimType;

  SceneDetectQualifier? sceneDetectQualifier;

  int? aimTimer;

  int? sameBarcodeTimeout;

  bool? triggerWakeupScan;

  int? differentBarcodeTimeout;

  IlluminationMode? illuminationMode;

  int? illuminationBrightness;

  LcdMode? lcdMode;

  int? lowPowerTimeout;

  DelayToLowPowerMode? delayToLowPowerMode;

  Inverse1dMode? inverse1dMode;

  int? viewFinderSize;

  int? viewFinderPosX;

  int? viewFinderPosY;

  EffortLevel? marginlessEffortLevel1d;

  EffortLevel? poorQualityBcDecodeEffortLevel;

  Charset? charsetName;

  List<String?>? autoCharsetPrefferedOrder;

  Charset? autoCharsetFallback;

  ViewFinderMode? viewFinderMode;

  CodeIdType? codeIdType;

  VolumeSliderType? volumeSliderType;

  String? decodeAudioFeedbackUri;

  bool? decodeHapticFeedback;

  bool? btDisconnectOnExit;

  int? connectionIdleTime;

  int? establishConnectionTime;

  int? remoteScannerAudioFeedbackMode;

  int? remoteScannerLedFeedbackMode;

  bool? displayBtAddressBarcode;

  int? goodDecodeLedTimer;

  bool? decodingLedFeedback;

  bool? decoderUsPlanetReportCheckDigit;

  bool? decodeScreenNotification;

  /// / Length of time (in milliseconds) to display the screen notification
  /// upon successful decode. 500-1500
  int? decodeScreenTime;

  /// Sets the translucency value for the decode notification green screen -
  /// higher values result to more translucency.
  ///  Values range from 20 to 50 in increments of 5:
  int? decodeScreenTranslucency;

  /// Enable/disable automatic re-connection to the connected Bluetooth scanner
  ///  after device reboot. Applies only to connected Bluetooth scanners:
  bool? keepParingInfoAfterReboot;

  /// Controls the illumination for decoding DPM barcodes.
  /// Default value is cycle.
  DpmIlluminationControl? dpmIlluminationControl;

  /// Optimize DPM barcode decoding performance based on the barcode size.
  /// Default is Mode 2
  DpmMode? dpmMode;

  bool? qrLaunchEnable;

  bool? qrLaunchEnableQrDecoder;

  bool? qrLaunchShowConfirmationDialog;

  /// Integer from 0 to 180000 in 1000 increments
  int? noDecodeTime;

  Object encode() {
    return <Object?>[
      decoderConfig,
      dataBarToUpcEan,
      upcEnableMarginlessDecode,
      upcEanSecurityLevel,
      upcEanSupplemental2,
      upcEanSupplemental5,
      upcEanSupplementalMode,
      upcEanRetryCount,
      upcEeanLinearDecode,
      upcEanBookland,
      upcEanCoupon,
      upcEanCouponReport,
      upcEanZeroExtend,
      upceanBooklandFormat,
      scanningMode,
      docCaptureTemplate,
      commonBarcodeDynamicQuantity,
      barcodeHighlightingEnabled,
      ruleName,
      enableUdiGs1,
      enableUdiHibcc,
      enableUdiIccbba,
      ocrOrientation,
      ocrLines,
      ocrMinChars,
      ocrMaxChars,
      ocrSubset,
      ocrQuietZone,
      ocrTemplate,
      ocrCheckDigitModulus,
      ocrCheckDigitMultiplier,
      ocrCheckDigitValidation,
      inverseOcr,
      presentationModeSensitivity,
      enableHardwareTrigger,
      autoSwitchToDefaultOnEvent,
      digimarcDecoding,
      multiBarcodeCount,
      enableInstantReporting,
      reportDecodedBarcodes,
      scannerTriggerResource,
      scannerInputEnabled,
      scannerSelection,
      configureAllScanners,
      scannerSelectionByIdentifier,
      enableAimMode,
      beamTimer,
      enableAdaptiveScanning,
      beamWidth,
      powerMode,
      mpdMode,
      readerMode,
      linearSecurityLevel,
      picklist,
      aimType,
      sceneDetectQualifier,
      aimTimer,
      sameBarcodeTimeout,
      triggerWakeupScan,
      differentBarcodeTimeout,
      illuminationMode,
      illuminationBrightness,
      lcdMode,
      lowPowerTimeout,
      delayToLowPowerMode,
      inverse1dMode,
      viewFinderSize,
      viewFinderPosX,
      viewFinderPosY,
      marginlessEffortLevel1d,
      poorQualityBcDecodeEffortLevel,
      charsetName,
      autoCharsetPrefferedOrder,
      autoCharsetFallback,
      viewFinderMode,
      codeIdType,
      volumeSliderType,
      decodeAudioFeedbackUri,
      decodeHapticFeedback,
      btDisconnectOnExit,
      connectionIdleTime,
      establishConnectionTime,
      remoteScannerAudioFeedbackMode,
      remoteScannerLedFeedbackMode,
      displayBtAddressBarcode,
      goodDecodeLedTimer,
      decodingLedFeedback,
      decoderUsPlanetReportCheckDigit,
      decodeScreenNotification,
      decodeScreenTime,
      decodeScreenTranslucency,
      keepParingInfoAfterReboot,
      dpmIlluminationControl,
      dpmMode,
      qrLaunchEnable,
      qrLaunchEnableQrDecoder,
      qrLaunchShowConfirmationDialog,
      noDecodeTime,
    ];
  }

  static PluginBarcodeParamters decode(Object result) {
    result as List<Object?>;
    return PluginBarcodeParamters(
      decoderConfig: (result[0] as List<Object?>?)?.cast<DecoderConfigItem?>(),
      dataBarToUpcEan: result[1] as bool?,
      upcEnableMarginlessDecode: result[2] as bool?,
      upcEanSecurityLevel: result[3] as int?,
      upcEanSupplemental2: result[4] as bool?,
      upcEanSupplemental5: result[5] as bool?,
      upcEanSupplementalMode: result[6] as UpcSupplementalMode?,
      upcEanRetryCount: result[7] as int?,
      upcEeanLinearDecode: result[8] as bool?,
      upcEanBookland: result[9] as bool?,
      upcEanCoupon: result[10] as bool?,
      upcEanCouponReport: result[11] as UpcEanCouponReport?,
      upcEanZeroExtend: result[12] as bool?,
      upceanBooklandFormat: result[13] as UpcEanBooklandFormat?,
      scanningMode: result[14] as ScanningMode?,
      docCaptureTemplate: result[15] as String?,
      commonBarcodeDynamicQuantity: result[16] as int?,
      barcodeHighlightingEnabled: result[17] as bool?,
      ruleName: result[18] as String?,
      enableUdiGs1: result[19] as bool?,
      enableUdiHibcc: result[20] as bool?,
      enableUdiIccbba: result[21] as bool?,
      ocrOrientation: result[22] as OcrOrientation?,
      ocrLines: result[23] as int?,
      ocrMinChars: result[24] as int?,
      ocrMaxChars: result[25] as int?,
      ocrSubset: result[26] as String?,
      ocrQuietZone: result[27] as int?,
      ocrTemplate: result[28] as String?,
      ocrCheckDigitModulus: result[29] as int?,
      ocrCheckDigitMultiplier: result[30] as int?,
      ocrCheckDigitValidation: result[31] as int?,
      inverseOcr: result[32] as InverseOcr?,
      presentationModeSensitivity: result[33] as PresentationModeSensitivity?,
      enableHardwareTrigger: result[34] as bool?,
      autoSwitchToDefaultOnEvent: result[35] as SwitchOnEvent?,
      digimarcDecoding: result[36] as bool?,
      multiBarcodeCount: result[37] as int?,
      enableInstantReporting: result[38] as bool?,
      reportDecodedBarcodes: result[39] as bool?,
      scannerTriggerResource: result[40] as TriggerSource?,
      scannerInputEnabled: result[41] as bool?,
      scannerSelection: result[42] as ScannerIdentifer?,
      configureAllScanners: result[43] as bool?,
      scannerSelectionByIdentifier: result[44] as String?,
      enableAimMode: result[45] as bool?,
      beamTimer: result[46] as int?,
      enableAdaptiveScanning: result[47] as bool?,
      beamWidth: result[48] as BeamWidth?,
      powerMode: result[49] as PowerMode?,
      mpdMode: result[50] as MpdMode?,
      readerMode: result[51] as ReaderMode?,
      linearSecurityLevel: result[52] as int?,
      picklist: result[53] as PicklistMode?,
      aimType: result[54] as AimType?,
      sceneDetectQualifier: result[55] as SceneDetectQualifier?,
      aimTimer: result[56] as int?,
      sameBarcodeTimeout: result[57] as int?,
      triggerWakeupScan: result[58] as bool?,
      differentBarcodeTimeout: result[59] as int?,
      illuminationMode: result[60] as IlluminationMode?,
      illuminationBrightness: result[61] as int?,
      lcdMode: result[62] as LcdMode?,
      lowPowerTimeout: result[63] as int?,
      delayToLowPowerMode: result[64] as DelayToLowPowerMode?,
      inverse1dMode: result[65] as Inverse1dMode?,
      viewFinderSize: result[66] as int?,
      viewFinderPosX: result[67] as int?,
      viewFinderPosY: result[68] as int?,
      marginlessEffortLevel1d: result[69] as EffortLevel?,
      poorQualityBcDecodeEffortLevel: result[70] as EffortLevel?,
      charsetName: result[71] as Charset?,
      autoCharsetPrefferedOrder: (result[72] as List<Object?>?)?.cast<String?>(),
      autoCharsetFallback: result[73] as Charset?,
      viewFinderMode: result[74] as ViewFinderMode?,
      codeIdType: result[75] as CodeIdType?,
      volumeSliderType: result[76] as VolumeSliderType?,
      decodeAudioFeedbackUri: result[77] as String?,
      decodeHapticFeedback: result[78] as bool?,
      btDisconnectOnExit: result[79] as bool?,
      connectionIdleTime: result[80] as int?,
      establishConnectionTime: result[81] as int?,
      remoteScannerAudioFeedbackMode: result[82] as int?,
      remoteScannerLedFeedbackMode: result[83] as int?,
      displayBtAddressBarcode: result[84] as bool?,
      goodDecodeLedTimer: result[85] as int?,
      decodingLedFeedback: result[86] as bool?,
      decoderUsPlanetReportCheckDigit: result[87] as bool?,
      decodeScreenNotification: result[88] as bool?,
      decodeScreenTime: result[89] as int?,
      decodeScreenTranslucency: result[90] as int?,
      keepParingInfoAfterReboot: result[91] as bool?,
      dpmIlluminationControl: result[92] as DpmIlluminationControl?,
      dpmMode: result[93] as DpmMode?,
      qrLaunchEnable: result[94] as bool?,
      qrLaunchEnableQrDecoder: result[95] as bool?,
      qrLaunchShowConfirmationDialog: result[96] as bool?,
      noDecodeTime: result[97] as int?,
    );
  }
}

class PluginConfig {
  PluginConfig({
    required this.resetConfig,
    required this.pluginName,
    this.outputPluginName,
  });

  bool resetConfig;

  PluginName pluginName;

  String? outputPluginName;

  Object encode() {
    return <Object?>[
      resetConfig,
      pluginName,
      outputPluginName,
    ];
  }

  static PluginConfig decode(Object result) {
    result as List<Object?>;
    return PluginConfig(
      resetConfig: result[0]! as bool,
      pluginName: result[1]! as PluginName,
      outputPluginName: result[2] as String?,
    );
  }
}

class ProfileConfig {
  ProfileConfig({
    required this.profileName,
    required this.configMode,
    this.barcodeParamters,
    this.intentParamters,
    required this.profileEnabled,
    this.appList,
  });

  String profileName;

  ConfigMode configMode;

  PluginBarcodeParamters? barcodeParamters;

  PluginIntentParamters? intentParamters;

  bool profileEnabled;

  List<AppEntry?>? appList;

  Object encode() {
    return <Object?>[
      profileName,
      configMode,
      barcodeParamters,
      intentParamters,
      profileEnabled,
      appList,
    ];
  }

  static ProfileConfig decode(Object result) {
    result as List<Object?>;
    return ProfileConfig(
      profileName: result[0]! as String,
      configMode: result[1]! as ConfigMode,
      barcodeParamters: result[2] as PluginBarcodeParamters?,
      intentParamters: result[3] as PluginIntentParamters?,
      profileEnabled: result[4]! as bool,
      appList: (result[5] as List<Object?>?)?.cast<AppEntry?>(),
    );
  }
}

class ScanEvent {
  ScanEvent({
    required this.labelType,
    required this.source,
    required this.dataString,
    required this.decodeData,
    required this.decodeMode,
  });

  LabelType labelType;

  ScanSource source;

  String dataString;

  List<Uint8List?> decodeData;

  DecodeMode decodeMode;

  Object encode() {
    return <Object?>[
      labelType,
      source,
      dataString,
      decodeData,
      decodeMode,
    ];
  }

  static ScanEvent decode(Object result) {
    result as List<Object?>;
    return ScanEvent(
      labelType: result[0]! as LabelType,
      source: result[1]! as ScanSource,
      dataString: result[2]! as String,
      decodeData: (result[3] as List<Object?>?)!.cast<Uint8List?>(),
      decodeMode: result[4]! as DecodeMode,
    );
  }
}

class ActionResult {
  ActionResult({
    required this.result,
    this.resultInfo,
    required this.message,
    this.command,
  });

  bool result;

  Map<String, Object>? resultInfo;

  String message;

  String? command;

  Object encode() {
    return <Object?>[
      result,
      resultInfo,
      message,
      command,
    ];
  }

  static ActionResult decode(Object result) {
    result as List<Object?>;
    return ActionResult(
      result: result[0]! as bool,
      resultInfo: (result[1] as Map<Object?, Object?>?)?.cast<String, Object>(),
      message: result[2]! as String,
      command: result[3] as String?,
    );
  }
}

class StatusChangeEvent {
  StatusChangeEvent({
    required this.newState,
  });

  ScannerState newState;

  Object encode() {
    return <Object?>[
      newState,
    ];
  }

  static StatusChangeEvent decode(Object result) {
    result as List<Object?>;
    return StatusChangeEvent(
      newState: result[0]! as ScannerState,
    );
  }
}

class DecoderConfigItem {
  DecoderConfigItem({
    this.decoder,
    this.enabled,
  });

  Decoder? decoder;

  bool? enabled;

  Object encode() {
    return <Object?>[
      decoder,
      enabled,
    ];
  }

  static DecoderConfigItem decode(Object result) {
    result as List<Object?>;
    return DecoderConfigItem(
      decoder: result[0] as Decoder?,
      enabled: result[1] as bool?,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is ConfigMode) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is PluginName) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is ScannerIdentifer) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is UpcSupplementalMode) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is UpcEanCouponReport) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is UpcEanBooklandFormat) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is ScanningMode) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is InverseOcr) {
      buffer.putUint8(136);
      writeValue(buffer, value.index);
    }    else if (value is OcrOrientation) {
      buffer.putUint8(137);
      writeValue(buffer, value.index);
    }    else if (value is IntentDelivery) {
      buffer.putUint8(138);
      writeValue(buffer, value.index);
    }    else if (value is DpmMode) {
      buffer.putUint8(139);
      writeValue(buffer, value.index);
    }    else if (value is BeamWidth) {
      buffer.putUint8(140);
      writeValue(buffer, value.index);
    }    else if (value is PowerMode) {
      buffer.putUint8(141);
      writeValue(buffer, value.index);
    }    else if (value is MpdMode) {
      buffer.putUint8(142);
      writeValue(buffer, value.index);
    }    else if (value is PicklistMode) {
      buffer.putUint8(143);
      writeValue(buffer, value.index);
    }    else if (value is ReaderMode) {
      buffer.putUint8(144);
      writeValue(buffer, value.index);
    }    else if (value is TriggerSource) {
      buffer.putUint8(145);
      writeValue(buffer, value.index);
    }    else if (value is DpmIlluminationControl) {
      buffer.putUint8(146);
      writeValue(buffer, value.index);
    }    else if (value is VolumeSliderType) {
      buffer.putUint8(147);
      writeValue(buffer, value.index);
    }    else if (value is CodeIdType) {
      buffer.putUint8(148);
      writeValue(buffer, value.index);
    }    else if (value is ViewFinderMode) {
      buffer.putUint8(149);
      writeValue(buffer, value.index);
    }    else if (value is Charset) {
      buffer.putUint8(150);
      writeValue(buffer, value.index);
    }    else if (value is EffortLevel) {
      buffer.putUint8(151);
      writeValue(buffer, value.index);
    }    else if (value is Inverse1dMode) {
      buffer.putUint8(152);
      writeValue(buffer, value.index);
    }    else if (value is DelayToLowPowerMode) {
      buffer.putUint8(153);
      writeValue(buffer, value.index);
    }    else if (value is LcdMode) {
      buffer.putUint8(154);
      writeValue(buffer, value.index);
    }    else if (value is IlluminationMode) {
      buffer.putUint8(155);
      writeValue(buffer, value.index);
    }    else if (value is SceneDetectQualifier) {
      buffer.putUint8(156);
      writeValue(buffer, value.index);
    }    else if (value is AimType) {
      buffer.putUint8(157);
      writeValue(buffer, value.index);
    }    else if (value is SwitchOnEvent) {
      buffer.putUint8(158);
      writeValue(buffer, value.index);
    }    else if (value is PresentationModeSensitivity) {
      buffer.putUint8(159);
      writeValue(buffer, value.index);
    }    else if (value is DatawedgeApiTargets) {
      buffer.putUint8(160);
      writeValue(buffer, value.index);
    }    else if (value is LabelType) {
      buffer.putUint8(161);
      writeValue(buffer, value.index);
    }    else if (value is ScanSource) {
      buffer.putUint8(162);
      writeValue(buffer, value.index);
    }    else if (value is DecodeMode) {
      buffer.putUint8(163);
      writeValue(buffer, value.index);
    }    else if (value is ScannerState) {
      buffer.putUint8(164);
      writeValue(buffer, value.index);
    }    else if (value is Decoder) {
      buffer.putUint8(165);
      writeValue(buffer, value.index);
    }    else if (value is AppEntry) {
      buffer.putUint8(166);
      writeValue(buffer, value.encode());
    }    else if (value is PluginIntentParamters) {
      buffer.putUint8(167);
      writeValue(buffer, value.encode());
    }    else if (value is PluginBarcodeParamters) {
      buffer.putUint8(168);
      writeValue(buffer, value.encode());
    }    else if (value is PluginConfig) {
      buffer.putUint8(169);
      writeValue(buffer, value.encode());
    }    else if (value is ProfileConfig) {
      buffer.putUint8(170);
      writeValue(buffer, value.encode());
    }    else if (value is ScanEvent) {
      buffer.putUint8(171);
      writeValue(buffer, value.encode());
    }    else if (value is ActionResult) {
      buffer.putUint8(172);
      writeValue(buffer, value.encode());
    }    else if (value is StatusChangeEvent) {
      buffer.putUint8(173);
      writeValue(buffer, value.encode());
    }    else if (value is DecoderConfigItem) {
      buffer.putUint8(174);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ConfigMode.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PluginName.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ScannerIdentifer.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : UpcSupplementalMode.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : UpcEanCouponReport.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : UpcEanBooklandFormat.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ScanningMode.values[value];
      case 136: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : InverseOcr.values[value];
      case 137: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : OcrOrientation.values[value];
      case 138: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : IntentDelivery.values[value];
      case 139: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DpmMode.values[value];
      case 140: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : BeamWidth.values[value];
      case 141: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PowerMode.values[value];
      case 142: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MpdMode.values[value];
      case 143: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PicklistMode.values[value];
      case 144: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ReaderMode.values[value];
      case 145: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TriggerSource.values[value];
      case 146: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DpmIlluminationControl.values[value];
      case 147: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : VolumeSliderType.values[value];
      case 148: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CodeIdType.values[value];
      case 149: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ViewFinderMode.values[value];
      case 150: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Charset.values[value];
      case 151: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : EffortLevel.values[value];
      case 152: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Inverse1dMode.values[value];
      case 153: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DelayToLowPowerMode.values[value];
      case 154: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : LcdMode.values[value];
      case 155: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : IlluminationMode.values[value];
      case 156: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : SceneDetectQualifier.values[value];
      case 157: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AimType.values[value];
      case 158: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : SwitchOnEvent.values[value];
      case 159: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PresentationModeSensitivity.values[value];
      case 160: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DatawedgeApiTargets.values[value];
      case 161: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : LabelType.values[value];
      case 162: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ScanSource.values[value];
      case 163: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DecodeMode.values[value];
      case 164: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ScannerState.values[value];
      case 165: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Decoder.values[value];
      case 166: 
        return AppEntry.decode(readValue(buffer)!);
      case 167: 
        return PluginIntentParamters.decode(readValue(buffer)!);
      case 168: 
        return PluginBarcodeParamters.decode(readValue(buffer)!);
      case 169: 
        return PluginConfig.decode(readValue(buffer)!);
      case 170: 
        return ProfileConfig.decode(readValue(buffer)!);
      case 171: 
        return ScanEvent.decode(readValue(buffer)!);
      case 172: 
        return ActionResult.decode(readValue(buffer)!);
      case 173: 
        return StatusChangeEvent.decode(readValue(buffer)!);
      case 174: 
        return DecoderConfigItem.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class DataWedgeFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onScannerStatusChanged(StatusChangeEvent statusEvent);

  void onScanResult(ScanEvent scanEvent);

  void onProfileChange();

  void onConfigUpdate();

  static void setUp(DataWedgeFlutterApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScannerStatusChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScannerStatusChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final StatusChangeEvent? arg_statusEvent = (args[0] as StatusChangeEvent?);
          assert(arg_statusEvent != null,
              'Argument for dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScannerStatusChanged was null, expected non-null StatusChangeEvent.');
          try {
            api.onScannerStatusChanged(arg_statusEvent!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScanResult$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScanResult was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ScanEvent? arg_scanEvent = (args[0] as ScanEvent?);
          assert(arg_scanEvent != null,
              'Argument for dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onScanResult was null, expected non-null ScanEvent.');
          try {
            api.onScanResult(arg_scanEvent!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onProfileChange$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onProfileChange();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_datawedge.DataWedgeFlutterApi.onConfigUpdate$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onConfigUpdate();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class DataWedgeHostApi {
  /// Constructor for [DataWedgeHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  DataWedgeHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> createProfile(String profileName) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.createProfile$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[profileName]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> registerForNotifications() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.registerForNotifications$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> unregisterForNotifications() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.unregisterForNotifications$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> suspendPlugin() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.suspendPlugin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<String> resumePlugin() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.resumePlugin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<String> enablePlugin() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.enablePlugin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<String> disablePlugin() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.disablePlugin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<String> softScanTrigger(bool on) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.softScanTrigger$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[on]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<String> getPackageIdentifer() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.getPackageIdentifer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<void> setDecoder(Decoder decoder, bool enabled, String profileName) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.setDecoder$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[decoder, enabled, profileName]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setProfileConfig(ProfileConfig config) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_datawedge.DataWedgeHostApi.setProfileConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[config]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
